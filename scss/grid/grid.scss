// @TODO
//
//// Enable
//// =============================================================================
//// Turn various features on/off as needed.
//
//$enable_grid_column_property:     true;
//$enable_grid_row_property:        true;
//$enable_justify_self_property:    true;
//$enable_align_self_property:      true;
//
//
//
//// Grid Data
//// =============================================================================
//// Defines the number of breakpoints and defaults used for each property at
//// that breakpoint. The slug for each breakpoint will be used in the custom
//// properties as a responsive reference (e.g. "--gap-xs"). The value of the
//// first breakpoint must be set to "0" to assign the mobile-first values.
//
//$grid: (
//  "xs": (
//    "breakpoint"          : 0,
//    "grid_gap"            : 2rem,
//    "grid_auto_flow"      : row,
//    "grid_auto_columns"   : auto,
//    "grid_auto_rows"      : auto,
//    "repeat_columns"      : 1,
//    "repeat_columns_size" : 1fr,
//    "justify_content"     : space-evenly,
//    "justify_items"       : stretch,
//    "align_content"       : center,
//    "align_items"         : stretch,
//    "grid_column"         : auto,
//    "grid_row"            : auto,
//    "justify_self"        : auto,
//    "align_self"          : auto,
//  ),
//  "sm": (
//    "breakpoint"          : 640px,
//    "grid_gap"            : 2rem,
//    "grid_auto_flow"      : row,
//    "grid_auto_columns"   : auto,
//    "grid_auto_rows"      : auto,
//    "repeat_columns"      : 2,
//    "repeat_columns_size" : 1fr,
//    "justify_content"     : space-evenly,
//    "justify_items"       : stretch,
//    "align_content"       : center,
//    "align_items"         : stretch,
//    "grid_column"         : auto,
//    "grid_row"            : auto,
//    "justify_self"        : auto,
//    "align_self"          : auto,
//  ),
//  "md": (
//    "breakpoint"          : 860px,
//    "grid_gap"            : 2rem,
//    "grid_auto_flow"      : row,
//    "grid_auto_columns"   : auto,
//    "grid_auto_rows"      : auto,
//    "repeat_columns"      : 2,
//    "repeat_columns_size" : 1fr,
//    "justify_content"     : space-evenly,
//    "justify_items"       : stretch,
//    "align_content"       : center,
//    "align_items"         : stretch,
//    "grid_column"         : auto,
//    "grid_row"            : auto,
//    "justify_self"        : auto,
//    "align_self"          : auto,
//  ),
//  "lg": (
//    "breakpoint"          : 1080px,
//    "grid_gap"            : 2rem,
//    "grid_auto_flow"      : row,
//    "grid_auto_columns"   : auto,
//    "grid_auto_rows"      : auto,
//    "repeat_columns"      : 4,
//    "repeat_columns_size" : 1fr,
//    "justify_content"     : space-evenly,
//    "justify_items"       : stretch,
//    "align_content"       : center,
//    "align_items"         : stretch,
//    "grid_column"         : auto,
//    "grid_row"            : auto,
//    "justify_self"        : auto,
//    "align_self"          : auto,
//  ),
//  "xl": (
//    "breakpoint"          : 1300px,
//    "grid_gap"            : 2rem,
//    "grid_auto_flow"      : row,
//    "grid_auto_columns"   : auto,
//    "grid_auto_rows"      : auto,
//    "repeat_columns"      : 4,
//    "repeat_columns_size" : 1fr,
//    "justify_content"     : space-evenly,
//    "justify_items"       : stretch,
//    "align_content"       : center,
//    "align_items"         : stretch,
//    "grid_column"         : auto,
//    "grid_row"            : auto,
//    "justify_self"        : auto,
//    "align_self"          : auto,
//  ),
//);
//
//@mixin iota-breakpoint($breakpoint) {
//  @if ($breakpoint != 0) {
//    @media (min-width: $breakpoint) {
//      @content;
//    }
//  } @else {
//    @content;
//  }
//}
//
//$grid-gap: 0.75rem !default;
//
//// Grid
//// =============================================================================
//
//.grid {
//  display: grid;
//
//  @each $bp, $data in $grid {
//    @include iota-breakpoint(map-get($data, "breakpoint")) {
//      grid-gap: var(#{--gap- + $bp}, map-get($data, "grid_gap"));
//      grid-auto-flow: var(#{--flow- + $bp}, map-get($data, "grid_auto_flow"));
//      grid-auto-columns: var(#{--auto-cols- + $bp}, map-get($data, "grid_auto_columns"));
//      grid-auto-rows: var(#{--auto-rows- + $bp}, map-get($data, "grid_auto_rows"));
//      grid-template-columns: var(#{--template-cols- + $bp}, repeat(var(#{--cols- + $bp}, map-get($data, "repeat_columns")), var(#{--cols-size- + $bp}, map-get($data, "repeat_columns_size"))));
//      grid-template-rows: var(#{--template-rows- + $bp}, none);
//      justify-content: var(#{--jc- + $bp}, map-get($data, "justify_content"));
//      justify-items: var(#{--ji- + $bp}, map-get($data, "justify_items"));
//      align-content: var(#{--ac- + $bp}, map-get($data, "align_content"));
//      align-items: var(#{--ai- + $bp}, map-get($data, "align_items"));
//    }
//  }
//
//  &.is-inline {
//    display: inline-grid;
//  }
//
//  > * {
//    min-width: 0px;
//    max-width: 100%;
//    min-height: 0px;
//
//    @each $bp, $data in $grid {
//      @include iota-breakpoint(map-get($data, "breakpoint")) {
//        @if $enable_grid_column_property {
//          grid-column: var(#{--col- + $bp}, map-get($data, "grid_column"));
//        }
//        @if $enable_grid_row_property {
//          grid-row: var(#{--row- + $bp}, map-get($data, "grid_row"));
//        }
//        @if $enable_justify_self_property {
//          justify-self: var(#{--js- + $bp}, map-get($data, "justify_self"));
//        }
//        @if $enable_align_self_property {
//          align-self: var(#{--as- + $bp}, map-get($data, "align_self"));
//        }
//      }
//    }
//  }
//}
